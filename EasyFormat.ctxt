#BlueJ class context
comment0.target=EasyFormat
comment0.text=\r\n\ \ @author\ Gary\ Litvin\r\n\ \ @version\ 1.3,\ 3/30/06\r\n\r\n\ \ Appendix\ to\:\r\n\ \r\n\ \ <i>Java\ Methods\ A\ and\ AB\:\ Object-Oriented\ Programming\ and\ Data\ Structures</i>\r\n\ \ (Skylight\ Publishing\ 2006,\ ISBN\ 0-9727055-7-0)\r\n\r\n\ \ EasyFormat\ puts\ a\ right-justified\ char,\ String,\r\n\ \ or\ number\ into\ a\ string.\r\n\r\n\ \ <xmp>\r\n\ \ Example\:\r\n\ \ \=\=\=\=\=\=\=\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Output\:\r\n\ \ System.out.println("["\ +\ EasyFormat.format('A',\ 5)\ \ \ \ \ \ \ \ +\ "]");\ //\ [\ \ \ \ A]\r\n\ \ System.out.println("["\ +\ EasyFormat.format("ABC",\ 5)\ \ \ \ \ \ +\ "]");\ //\ [\ \ ABC]\r\n\ \ System.out.println("["\ +\ EasyFormat.format("ABCDEF",\ 5)\ \ \ +\ "]");\ //\ [ABCDEF]\r\n\ \ System.out.println("["\ +\ EasyFormat.format(567,\ 5)\ \ \ \ \ \ \ \ +\ "]");\ //\ [\ \ 567]\r\n\ \ System.out.println("["\ +\ EasyFormat.format(-567,\ 5)\ \ \ \ \ \ \ +\ "]");\ //\ [\ -567]\r\n\ \ System.out.println("["\ +\ EasyFormat.format(56.789,\ 5,\ 1)\ \ +\ "]");\ //\ [\ 56.8]\r\n\ \ System.out.println("["\ +\ EasyFormat.format(-56.789,\ 5,\ 1)\ +\ "]");\ //\ [-56.8]\r\n\ \ System.out.println("["\ +\ EasyFormat.format(56.789,\ 5,\ 3)\ \ +\ "]");\ //\ [56.789]\r\n\ \ </xmp>\r\n
comment1.params=s\ width
comment1.target=java.lang.String\ format(java.lang.String,\ int)
comment1.text=\r\n\ \ Returns\ <code>s</code>\ padded\ with\ spaces\ on\ the\ left\ to\ make\r\n\ \ a\ string\ of\ a\ given\ width\ (if\ <code>s.length()\ <\ width</code>).\r\n\ \ @param\ width\ the\ (minimal)\ width\ of\ the\ returned\ string.\r\n\ \ @return\ s\ if\ s.length\ >\ width;\r\n\ \ otherwise\ returns\ s\ padded\ with\ spaces\ on\ the\ left.\r\n
comment2.params=ch\ width
comment2.target=java.lang.String\ format(char,\ int)
comment2.text=\r\n\ \ Returns\ <code>ch</code>\ padded\ with\ spaces\ on\ the\ left\ to\ make\r\n\ \ a\ string\ of\ a\ given\ width.\r\n\ \ @param\ width\ the\ (minimal)\ width\ of\ the\ returned\ string.\r\n\ \ @return\ format(String.valueOf(ch),\ width).\r\n
comment3.params=m\ width
comment3.target=java.lang.String\ format(int,\ int)
comment3.text=\r\n\ \ Returns\ <code>m</code>\ padded\ with\ spaces\ on\ the\ left\ to\ make\r\n\ \ a\ string\ of\ a\ given\ width.\r\n\ \ @param\ width\ the\ (minimal)\ width\ of\ the\ returned\ string.\r\n\ \ @return\ format(String.valueOf(m),\ width).\r\n
comment4.params=x\ width
comment4.target=java.lang.String\ format(double,\ int)
comment4.text=\r\n\ \ Returns\ <code>x</code>\ padded\ with\ spaces\ on\ the\ left\ to\ make\r\n\ \ a\ string\ of\ a\ given\ width.\r\n\ \ @param\ width\ the\ (minimal)\ width\ of\ the\ returned\ string.\r\n\ \ @return\ format(String.valueOf(x),\ width).\r\n
comment5.params=x\ width\ precision
comment5.target=java.lang.String\ format(double,\ int,\ int)
comment5.text=\r\n\ \ Converts\ <code>x</code>\ into\ a\ string\ using\r\n\ \ a\ DecimalFormat\ with\ the\ specified\ precision.\ \ Returns\ the\ resulting\r\n\ \ string,\ padded\ with\ spaces\ on\ the\ left\ to\ make\r\n\ \ a\ string\ of\ a\ given\ width.\r\n\ \ @param\ width\ the\ (minimal)\ width\ of\ the\ returned\ string.\r\n\ \ @return\ the\ formatted\ and\ padded\ string.\r\n
numComments=6
